.
├── README.md                      # Project documentation and setup instructions
├── app                            # Next.js 13+ app directory for routing and pages
│   ├── api                        # API routes for server-side logic (Next.js API Routes)
│   │   ├── auth                   # Authentication-related API endpoints
│   │   │   └── [...nextauth]      # Catch-all route for NextAuth.js authentication
│   │   │       └── route.ts       # NextAuth configuration and route handler
│   │   ├── stats                  # Endpoints for fetching application statistics
│   │   │   └── route.ts           # Handler for aggregating and returning ticket stats
│   │   ├── ticket                 # Ticket-related API endpoints
│   │   │   ├── [ticketid]         # Dynamic route for individual ticket operations
│   │   │   │   └── route.ts       # CRUD operations for specific tickets
│   │   │   ├── bulk               # Endpoint for bulk ticket operations
│   │   │   │   └── route.ts       # Handles bulk updates/deletes of tickets
│   │   │   ├── new                # Endpoint for creating new tickets
│   │   │   │   └── route.ts       # Handles ticket creation and validation
│   │   │   └── route.ts           # General ticket operations (e.g., listing all tickets)
│   │   └── user                   # User-related API endpoints
│   │       └── route.ts           # User operations (e.g., listing, creating users)
│   ├── auth                       # Authentication-related pages and server actions
│   │   ├── actions                # Server actions for authentication flows
│   │   │   └── actions.ts         # Implements user registration logic
│   │   ├── register               # User registration page and components
│   │   │   ├── page.tsx           # Registration page component
│   │   │   └── registrationForm.tsx  # Form component for user registration
│   │   └── signin                 # Sign-in page and components
│   │       └── page.tsx           # Sign-in page with authentication form
│   ├── dashboard                  # Main dashboard area of the application
│   │   ├── auth-context.tsx       # Context provider for authentication state
│   │   ├── columns.tsx            # Column definitions for dashboard data tables
│   │   ├── data-table.tsx         # Reusable data table component with sorting/filtering
│   │   ├── inspector-list.tsx     # Component for listing and selecting inspectors
│   │   ├── layout.tsx             # Layout wrapper for dashboard pages
│   │   ├── page.tsx               # Main dashboard page component
│   │   ├── row-actions.tsx        # Action buttons/menu for table rows
│   │   ├── stats.tsx              # Statistics display component
│   │   └── ticket-table.tsx       # Ticket listing table component
│   ├── favicon.ico                # Favicon for the application
│   ├── globals.css                # Global styles using Tailwind CSS
│   ├── layout.tsx                 # Root layout component for the entire app
│   └── page.tsx                   # Home page component (likely redirects to dashboard)
├── components                     # Reusable UI components
│   ├── appbar.tsx                 # Top navigation bar component
│   ├── dialog                     # Reusable dialog components
│   │   └── map-dialog.tsx         # Dialog for displaying Google Maps
│   ├── map.tsx                    # Google Maps integration component
│   ├── modal                      # Modal dialog components
│   │   ├── alert-modal.tsx        # Confirmation/alert modal
│   │   ├── loading-modal.tsx      # Loading spinner modal
│   │   └── photo-modal.tsx        # Modal for displaying ticket photos
│   └── ui                         # UI component library (likely using shadcn/ui)
│       ├── alert-dialog.tsx       # Alert dialog component
│       ├── avatar.tsx             # User avatar component
│       ├── badge.tsx              # Badge/label component
│       ├── button.tsx             # Reusable button component
│       ├── card.tsx               # Card container component
│       ├── checkbox.tsx           # Checkbox input component
│       ├── combobox.tsx           # Combo box (autocomplete) component
│       ├── command.tsx            # Command palette component
│       ├── dialog.tsx             # Base dialog component
│       ├── dropdown-menu.tsx      # Dropdown menu component
│       ├── input.tsx              # Text input component
│       ├── label.tsx              # Form label component
│       ├── loader.tsx             # Loading spinner component
│       ├── popover.tsx            # Popover component for tooltips/menus
│       ├── sheet.tsx              # Slide-out sheet component
│       ├── submit-button.tsx      # Form submit button with loading state
│       ├── table.tsx              # Table component
│       ├── textarea.tsx           # Multiline text input component
│       └── toast.tsx              # Toast notification component
├── lib                            # Utility functions and configurations
│   ├── db.ts                      # Database connection utility
│   ├── firebase.ts                # Firebase configuration for image storage
│   └── utils.ts                   # General utility functions
├── middleware.ts                  # Next.js middleware for auth protection
├── next.config.js                 # Next.js configuration file
├── package.json                   # NPM package configuration
├── postcss.config.js              # PostCSS configuration for Tailwind
├── public                         # Static assets
│   ├── marker_flag.png            # Custom map marker image
│   ├── next.svg                   # Next.js logo
│   └── vercel.svg                 # Vercel logo
├── schemas                        # Mongoose schema definitions
│   ├── ticket.ts                  # Ticket model schema
│   └── user.ts                    # User model schema
├── tailwind.config.js             # Tailwind CSS configuration
├── tsconfig.json                  # TypeScript configuration
└── types                          # TypeScript type definitions
    └── index.ts                   # Shared type definitions for the app

# Application Overview

This Next.js application is designed to manage and track tickets for a campaign sign management system. Here's a detailed overview of the application structure and key features:

1. **Authentication:**
   - Uses NextAuth.js for authentication, supporting credential-based login.
   - Custom registration process with server-side actions.
   - Protected routes using Next.js middleware.

2. **Database:**
   - MongoDB is used as the primary database, with Mongoose for ODM.
   - Two main schemas: User and Ticket.

3. **API Routes:**
   - Implements Next.js API routes for server-side operations.
   - Endpoints for ticket CRUD operations, user management, and statistics.

4. **Dashboard:**
   - Main interface for ticket management.
   - Displays ticket statistics and a detailed ticket table.
   - Supports filtering, sorting, and bulk actions on tickets.

5. **Map Integration:**
   - Uses Google Maps API to display ticket locations.
   - Custom map dialog for viewing and possibly adding map pins.

6. **Image Handling:**
   - Firebase is used for storing and retrieving ticket photos.

7. **UI Components:**
   - Utilizes a custom UI component library, likely based on shadcn/ui.
   - Fully responsive design for desktop, tablet, and mobile.

8. **State Management:**
   - Relies on React's Context API for auth state.
   - Uses React hooks for local component state.

9. **Styling:**
   - Tailwind CSS for utility-first styling approach.
   - Global styles defined in `globals.css`.

10. **TypeScript:**
    - Fully typed codebase for improved developer experience and code quality.
    - Shared type definitions in `types/index.ts`.

11. **Code Organization:**
    - Follows Next.js 13+ app directory structure.
    - Separates concerns with components, lib utilities, and API routes.

12. **Development Tooling:**
    - ESLint for code linting.
    - PostCSS for processing Tailwind CSS.

This application demonstrates a modern, full-stack JavaScript application with a focus on scalability, maintainability, and user experience. It leverages the latest features of Next.js, React, and the broader JavaScript ecosystem to create a robust ticket management system.


This annotated directory tree and application overview provide a comprehensive understanding of your project's structure, technologies used, and key features. It should give AI chatbots a solid foundation to understand your application in detail and assist you with fixing errors or improving your code.

Here are a few suggestions to further enhance the information:

1. Add a brief description of the application's purpose and main features at the beginning of your README.md file.

2. Consider creating a CONTRIBUTING.md file with guidelines for developers who might work on the project.

3. Add inline documentation to your React components, especially for complex logic or prop interfaces.

4. Create a separate file for environment variables (e.g., .env.example) to show what configuration is needed without exposing sensitive information.

5. If you have any specific coding standards or architectural decisions that are not immediately obvious from the code, consider documenting them in a separate ARCHITECTURE.md file.

6. For the database schemas, you could add a DATABASE.md file that describes the relationships between different models and any indexing strategies you're using.

By including this additional documentation, you'll provide even more context for AI assistants and human developers alike, making it easier to understand and contribute to your project.